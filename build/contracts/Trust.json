{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timeUntilRelease",
          "type": "uint256"
        }
      ],
      "name": "addBeneficiary",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "beneficiaries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseDate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "grantor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/Trust.sol"
  },
  "ast": {
    "absolutePath": "contracts/Trust.sol",
    "exportedSymbols": {
      "Trust": [
        147
      ]
    },
    "id": 148,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Trust",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 147,
        "linearizedBaseContracts": [
          147
        ],
        "name": "Trust",
        "nameLocation": "67:5:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Trust.Beneficiary",
            "id": 8,
            "members": [
              {
                "constant": false,
                "id": 3,
                "mutability": "mutable",
                "name": "amount",
                "nameLocation": "116:6:0",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "108:14:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "108:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5,
                "mutability": "mutable",
                "name": "releaseDate",
                "nameLocation": "140:11:0",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "132:19:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "132:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 7,
                "mutability": "mutable",
                "name": "paid",
                "nameLocation": "166:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 8,
                "src": "161:9:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 6,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "161:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Beneficiary",
            "nameLocation": "86:11:0",
            "nodeType": "StructDefinition",
            "scope": 147,
            "src": "79:98:0",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "01567739",
            "id": 13,
            "mutability": "mutable",
            "name": "beneficiaries",
            "nameLocation": "221:13:0",
            "nodeType": "VariableDeclaration",
            "scope": 147,
            "src": "182:52:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Beneficiary_$8_storage_$",
              "typeString": "mapping(address => struct Trust.Beneficiary)"
            },
            "typeName": {
              "id": 12,
              "keyType": {
                "id": 9,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "190:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "182:31:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Beneficiary_$8_storage_$",
                "typeString": "mapping(address => struct Trust.Beneficiary)"
              },
              "valueType": {
                "id": 11,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 10,
                  "name": "Beneficiary",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 8,
                  "src": "201:11:0"
                },
                "referencedDeclaration": 8,
                "src": "201:11:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Beneficiary_$8_storage_ptr",
                  "typeString": "struct Trust.Beneficiary"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "bab253b3",
            "id": 15,
            "mutability": "mutable",
            "name": "grantor",
            "nameLocation": "255:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 147,
            "src": "240:22:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 14,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "240:7:0",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 23,
              "nodeType": "Block",
              "src": "283:37:0",
              "statements": [
                {
                  "expression": {
                    "id": 21,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 18,
                      "name": "grantor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15,
                      "src": "293:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 19,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "303:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 20,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "303:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "293:20:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 22,
                  "nodeType": "ExpressionStatement",
                  "src": "293:20:0"
                }
              ]
            },
            "id": 24,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 16,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "280:2:0"
            },
            "returnParameters": {
              "id": 17,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "283:0:0"
            },
            "scope": 147,
            "src": "269:51:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 63,
              "nodeType": "Block",
              "src": "434:447:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 35,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 32,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "465:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 33,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "465:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 34,
                          "name": "grantor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 15,
                          "src": "479:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "465:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c7920746865206772616e746f72206f6620746869732074727573742063616e2061646420612062656e656669636961727921",
                        "id": 36,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "500:55:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_642964505935395e7bffffae40f10b69635b539bc18d57ed51457be4dc85af3d",
                          "typeString": "literal_string \"Only the grantor of this trust can add a beneficiary!\""
                        },
                        "value": "Only the grantor of this trust can add a beneficiary!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_642964505935395e7bffffae40f10b69635b539bc18d57ed51457be4dc85af3d",
                          "typeString": "literal_string \"Only the grantor of this trust can add a beneficiary!\""
                        }
                      ],
                      "id": 31,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "444:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 37,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "444:121:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 38,
                  "nodeType": "ExpressionStatement",
                  "src": "444:121:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 45,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 40,
                              "name": "beneficiaries",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 13,
                              "src": "596:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Beneficiary_$8_storage_$",
                                "typeString": "mapping(address => struct Trust.Beneficiary storage ref)"
                              }
                            },
                            "id": 42,
                            "indexExpression": {
                              "id": 41,
                              "name": "beneficiary",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26,
                              "src": "610:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "596:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Beneficiary_$8_storage",
                              "typeString": "struct Trust.Beneficiary storage ref"
                            }
                          },
                          "id": 43,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "amount",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3,
                          "src": "596:33:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 44,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "633:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "596:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f7527766520616c726561647920616464656420746869732062656e65666963696172792e2e2e757365206120646966666572656e74206164647265737321",
                        "id": 46,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "648:66:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_798ae6156fdd2d5c79635dc932180cc554afc3c0df6fa82910d4ec3ba743b7ff",
                          "typeString": "literal_string \"You've already added this beneficiary...use a different address!\""
                        },
                        "value": "You've already added this beneficiary...use a different address!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_798ae6156fdd2d5c79635dc932180cc554afc3c0df6fa82910d4ec3ba743b7ff",
                          "typeString": "literal_string \"You've already added this beneficiary...use a different address!\""
                        }
                      ],
                      "id": 39,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "575:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 47,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "575:149:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 48,
                  "nodeType": "ExpressionStatement",
                  "src": "575:149:0"
                },
                {
                  "expression": {
                    "id": 61,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 49,
                        "name": "beneficiaries",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13,
                        "src": "734:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Beneficiary_$8_storage_$",
                          "typeString": "mapping(address => struct Trust.Beneficiary storage ref)"
                        }
                      },
                      "id": 51,
                      "indexExpression": {
                        "id": 50,
                        "name": "beneficiary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26,
                        "src": "748:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "734:26:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Beneficiary_$8_storage",
                        "typeString": "struct Trust.Beneficiary storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 53,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "788:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 54,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "788:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 58,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 55,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "811:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 56,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "811:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 57,
                            "name": "timeUntilRelease",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28,
                            "src": "829:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "811:34:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "hexValue": "66616c7365",
                          "id": 59,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "859:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        ],
                        "id": 52,
                        "name": "Beneficiary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "763:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Beneficiary_$8_storage_ptr_$",
                          "typeString": "type(struct Trust.Beneficiary storage pointer)"
                        }
                      },
                      "id": 60,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "763:111:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Beneficiary_$8_memory_ptr",
                        "typeString": "struct Trust.Beneficiary memory"
                      }
                    },
                    "src": "734:140:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Beneficiary_$8_storage",
                      "typeString": "struct Trust.Beneficiary storage ref"
                    }
                  },
                  "id": 62,
                  "nodeType": "ExpressionStatement",
                  "src": "734:140:0"
                }
              ]
            },
            "functionSelector": "96074e70",
            "id": 64,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addBeneficiary",
            "nameLocation": "335:14:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 29,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26,
                  "mutability": "mutable",
                  "name": "beneficiary",
                  "nameLocation": "358:11:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 64,
                  "src": "350:19:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "350:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28,
                  "mutability": "mutable",
                  "name": "timeUntilRelease",
                  "nameLocation": "379:16:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 64,
                  "src": "371:24:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "371:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "349:47:0"
            },
            "returnParameters": {
              "id": 30,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "434:0:0"
            },
            "scope": 147,
            "src": "326:555:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 145,
              "nodeType": "Block",
              "src": "936:827:0",
              "statements": [
                {
                  "assignments": [
                    71
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 71,
                      "mutability": "mutable",
                      "name": "beneficiary",
                      "nameLocation": "966:11:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 145,
                      "src": "946:31:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Beneficiary_$8_storage_ptr",
                        "typeString": "struct Trust.Beneficiary"
                      },
                      "typeName": {
                        "id": 70,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 69,
                          "name": "Beneficiary",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 8,
                          "src": "946:11:0"
                        },
                        "referencedDeclaration": 8,
                        "src": "946:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Beneficiary_$8_storage_ptr",
                          "typeString": "struct Trust.Beneficiary"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 76,
                  "initialValue": {
                    "baseExpression": {
                      "id": 72,
                      "name": "beneficiaries",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13,
                      "src": "980:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Beneficiary_$8_storage_$",
                        "typeString": "mapping(address => struct Trust.Beneficiary storage ref)"
                      }
                    },
                    "id": 75,
                    "indexExpression": {
                      "expression": {
                        "id": 73,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "994:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 74,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "994:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "980:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Beneficiary_$8_storage",
                      "typeString": "struct Trust.Beneficiary storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "946:59:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 82,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 78,
                            "name": "beneficiary",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 71,
                            "src": "1036:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Beneficiary_$8_storage_ptr",
                              "typeString": "struct Trust.Beneficiary storage pointer"
                            }
                          },
                          "id": 79,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "releaseDate",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 5,
                          "src": "1036:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "expression": {
                            "id": 80,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "1063:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 81,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "1063:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1036:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f752063616e277420776974686472617720756e74696c20796f75722072656c6561736520646174652e",
                        "id": 83,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1092:45:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_416d70a6123f81ea20ab9b8f66b159c93abf50280a17f3a5b2577e87fe07719e",
                          "typeString": "literal_string \"You can't withdraw until your release date.\""
                        },
                        "value": "You can't withdraw until your release date."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_416d70a6123f81ea20ab9b8f66b159c93abf50280a17f3a5b2577e87fe07719e",
                          "typeString": "literal_string \"You can't withdraw until your release date.\""
                        }
                      ],
                      "id": 77,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1015:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 84,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1015:132:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 85,
                  "nodeType": "ExpressionStatement",
                  "src": "1015:132:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 90,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 87,
                            "name": "beneficiary",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 71,
                            "src": "1178:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Beneficiary_$8_storage_ptr",
                              "typeString": "struct Trust.Beneficiary storage pointer"
                            }
                          },
                          "id": 88,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "amount",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3,
                          "src": "1178:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "id": 89,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 66,
                          "src": "1199:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1178:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f752063616e2774207769746864726177206d6f7265207468616e20796f75722072656d61696e696e672062616c616e63652e",
                        "id": 91,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1220:54:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_355e60bf226e0785bdb0414d72aac4ea32a7161267fe12cee84716c99bba2403",
                          "typeString": "literal_string \"You can't withdraw more than your remaining balance.\""
                        },
                        "value": "You can't withdraw more than your remaining balance."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_355e60bf226e0785bdb0414d72aac4ea32a7161267fe12cee84716c99bba2403",
                          "typeString": "literal_string \"You can't withdraw more than your remaining balance.\""
                        }
                      ],
                      "id": 86,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1157:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 92,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1157:127:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 93,
                  "nodeType": "ExpressionStatement",
                  "src": "1157:127:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 98,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 95,
                            "name": "beneficiary",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 71,
                            "src": "1315:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Beneficiary_$8_storage_ptr",
                              "typeString": "struct Trust.Beneficiary storage pointer"
                            }
                          },
                          "id": 96,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "amount",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3,
                          "src": "1315:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 97,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1336:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1315:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520616d6f756e7420746f20776974687261772063616e6e6f74206265207a65726f2e",
                        "id": 99,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1351:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_68f76c73510ffba21fdb5cb77cd072465b67435028d46532bec377844e67b3e4",
                          "typeString": "literal_string \"The amount to withraw cannot be zero.\""
                        },
                        "value": "The amount to withraw cannot be zero."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_68f76c73510ffba21fdb5cb77cd072465b67435028d46532bec377844e67b3e4",
                          "typeString": "literal_string \"The amount to withraw cannot be zero.\""
                        }
                      ],
                      "id": 94,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1294:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 100,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1294:106:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 101,
                  "nodeType": "ExpressionStatement",
                  "src": "1294:106:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 106,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 103,
                            "name": "beneficiary",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 71,
                            "src": "1431:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Beneficiary_$8_storage_ptr",
                              "typeString": "struct Trust.Beneficiary storage pointer"
                            }
                          },
                          "id": 104,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "paid",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 7,
                          "src": "1431:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "66616c7365",
                          "id": 105,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1451:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "1431:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f7527766520616c726561647920776974686472657720796f75722066756e647321",
                        "id": 107,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1470:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_288cb02c6a80d9f24aa61ad0914d61721cc29b7b36fb5f9a68023af6c99fda41",
                          "typeString": "literal_string \"You've already withdrew your funds!\""
                        },
                        "value": "You've already withdrew your funds!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_288cb02c6a80d9f24aa61ad0914d61721cc29b7b36fb5f9a68023af6c99fda41",
                          "typeString": "literal_string \"You've already withdrew your funds!\""
                        }
                      ],
                      "id": 102,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1410:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 108,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1410:107:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 109,
                  "nodeType": "ExpressionStatement",
                  "src": "1410:107:0"
                },
                {
                  "expression": {
                    "id": 114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 110,
                        "name": "beneficiary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 71,
                        "src": "1527:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Beneficiary_$8_storage_ptr",
                          "typeString": "struct Trust.Beneficiary storage pointer"
                        }
                      },
                      "id": 112,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "amount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3,
                      "src": "1527:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 113,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 66,
                      "src": "1549:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1527:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 115,
                  "nodeType": "ExpressionStatement",
                  "src": "1527:29:0"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 119,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 116,
                        "name": "beneficiary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 71,
                        "src": "1570:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Beneficiary_$8_storage_ptr",
                          "typeString": "struct Trust.Beneficiary storage pointer"
                        }
                      },
                      "id": 117,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "amount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3,
                      "src": "1570:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<=",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 118,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1592:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1570:23:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 133,
                    "nodeType": "Block",
                    "src": "1649:49:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 131,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 127,
                              "name": "beneficiary",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 71,
                              "src": "1663:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Beneficiary_$8_storage_ptr",
                                "typeString": "struct Trust.Beneficiary storage pointer"
                              }
                            },
                            "id": 129,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "paid",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 7,
                            "src": "1663:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "66616c7365",
                            "id": 130,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1682:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "src": "1663:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 132,
                        "nodeType": "ExpressionStatement",
                        "src": "1663:24:0"
                      }
                    ]
                  },
                  "id": 134,
                  "nodeType": "IfStatement",
                  "src": "1566:132:0",
                  "trueBody": {
                    "id": 126,
                    "nodeType": "Block",
                    "src": "1595:48:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 124,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 120,
                              "name": "beneficiary",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 71,
                              "src": "1609:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Beneficiary_$8_storage_ptr",
                                "typeString": "struct Trust.Beneficiary storage pointer"
                              }
                            },
                            "id": 122,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "paid",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 7,
                            "src": "1609:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 123,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1628:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "1609:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 125,
                        "nodeType": "ExpressionStatement",
                        "src": "1609:23:0"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 141,
                          "name": "beneficiary",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 71,
                          "src": "1737:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Beneficiary_$8_storage_ptr",
                            "typeString": "struct Trust.Beneficiary storage pointer"
                          }
                        },
                        "id": 142,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "amount",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3,
                        "src": "1737:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 137,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "1716:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 138,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "1716:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 136,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1708:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 135,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1708:8:0",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 139,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1708:19:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 140,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "1708:28:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 143,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1708:48:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 144,
                  "nodeType": "ExpressionStatement",
                  "src": "1708:48:0"
                }
              ]
            },
            "functionSelector": "155dd5ee",
            "id": 146,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawFunds",
            "nameLocation": "896:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 67,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 66,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "918:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 146,
                  "src": "910:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 65,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "910:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "909:17:0"
            },
            "returnParameters": {
              "id": 68,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "936:0:0"
            },
            "scope": 147,
            "src": "887:876:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 148,
        "src": "58:1707:0",
        "usedErrors": []
      }
    ],
    "src": "33:1733:0"
  },
  "bytecode": "608060405234801561001057600080fd5b50600180546001600160a01b03191633179055610594806100326000396000f3fe60806040526004361061003f5760003560e01c80630156773914610044578063155dd5ee146100a557806396074e70146100c7578063bab253b3146100da575b600080fd5b34801561005057600080fd5b5061008361005f3660046104b4565b60006020819052908152604090208054600182015460029092015490919060ff1683565b6040805193845260208401929092521515908201526060015b60405180910390f35b3480156100b157600080fd5b506100c56100c03660046104d6565b610112565b005b6100c56100d53660046104ef565b61032a565b3480156100e657600080fd5b506001546100fa906001600160a01b031681565b6040516001600160a01b03909116815260200161009c565b336000908152602081905260409020600181015442101561018e5760405162461bcd60e51b815260206004820152602b60248201527f596f752063616e277420776974686472617720756e74696c20796f757220726560448201526a3632b0b9b2903230ba329760a91b60648201526084015b60405180910390fd5b805482106101fb5760405162461bcd60e51b815260206004820152603460248201527f596f752063616e2774207769746864726177206d6f7265207468616e20796f7560448201527339103932b6b0b4b734b733903130b630b731b29760611b6064820152608401610185565b80546102575760405162461bcd60e51b815260206004820152602560248201527f54686520616d6f756e7420746f20776974687261772063616e6e6f74206265206044820152643d32b9379760d91b6064820152608401610185565b600281015460ff16156102b85760405162461bcd60e51b815260206004820152602360248201527f596f7527766520616c726561647920776974686472657720796f75722066756e60448201526264732160e81b6064820152608401610185565b818160000160008282546102cc919061052f565b909155505080546102eb5760028101805460ff191660011790556102f8565b60028101805460ff191690555b8054604051339180156108fc02916000818181858888f19350505050158015610325573d6000803e3d6000fd5b505050565b6001546001600160a01b031633146103a25760405162461bcd60e51b815260206004820152603560248201527f4f6e6c7920746865206772616e746f72206f6620746869732074727573742063604482015274616e2061646420612062656e65666963696172792160581b6064820152608401610185565b6001600160a01b03821660009081526020819052604090205415610430576040805162461bcd60e51b81526020600482015260248101919091527f596f7527766520616c726561647920616464656420746869732062656e65666960448201527f63696172792e2e2e757365206120646966666572656e742061646472657373216064820152608401610185565b6040518060600160405280348152602001824261044d9190610546565b8152600060209182018190526001600160a01b03949094168452838152604093849020825181559082015160018201559201516002909201805460ff19169215159290921790915550565b80356001600160a01b03811681146104af57600080fd5b919050565b6000602082840312156104c657600080fd5b6104cf82610498565b9392505050565b6000602082840312156104e857600080fd5b5035919050565b6000806040838503121561050257600080fd5b61050b83610498565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561054157610541610519565b500390565b6000821982111561055957610559610519565b50019056fea2646970667358221220bb7c3aaa7fbef552fd6e6267dd3f2c3291c1a18271c869c5346a6cdf7758cef764736f6c634300080a0033",
  "bytecodeSha1": "f04c42c0a5fc99dbd4c2230c221748eb784e965b",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.10+commit.fc410830"
  },
  "contractName": "Trust",
  "coverageMap": {
    "branches": {
      "0": {
        "Trust.addBeneficiary": {
          "14": [
            465,
            486,
            true
          ],
          "15": [
            596,
            634,
            true
          ]
        },
        "Trust.withdrawFunds": {
          "11": [
            1036,
            1078,
            true
          ],
          "12": [
            1178,
            1206,
            true
          ],
          "13": [
            1431,
            1456,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Trust.addBeneficiary": {
          "8": [
            444,
            565
          ],
          "9": [
            575,
            724
          ],
          "10": [
            734,
            874
          ]
        },
        "Trust.withdrawFunds": {
          "0": [
            1015,
            1147
          ],
          "1": [
            1157,
            1284
          ],
          "2": [
            1294,
            1400
          ],
          "3": [
            1410,
            1517
          ],
          "4": [
            1527,
            1556
          ],
          "5": [
            1609,
            1632
          ],
          "6": [
            1663,
            1687
          ],
          "7": [
            1708,
            1756
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "60806040526004361061003f5760003560e01c80630156773914610044578063155dd5ee146100a557806396074e70146100c7578063bab253b3146100da575b600080fd5b34801561005057600080fd5b5061008361005f3660046104b4565b60006020819052908152604090208054600182015460029092015490919060ff1683565b6040805193845260208401929092521515908201526060015b60405180910390f35b3480156100b157600080fd5b506100c56100c03660046104d6565b610112565b005b6100c56100d53660046104ef565b61032a565b3480156100e657600080fd5b506001546100fa906001600160a01b031681565b6040516001600160a01b03909116815260200161009c565b336000908152602081905260409020600181015442101561018e5760405162461bcd60e51b815260206004820152602b60248201527f596f752063616e277420776974686472617720756e74696c20796f757220726560448201526a3632b0b9b2903230ba329760a91b60648201526084015b60405180910390fd5b805482106101fb5760405162461bcd60e51b815260206004820152603460248201527f596f752063616e2774207769746864726177206d6f7265207468616e20796f7560448201527339103932b6b0b4b734b733903130b630b731b29760611b6064820152608401610185565b80546102575760405162461bcd60e51b815260206004820152602560248201527f54686520616d6f756e7420746f20776974687261772063616e6e6f74206265206044820152643d32b9379760d91b6064820152608401610185565b600281015460ff16156102b85760405162461bcd60e51b815260206004820152602360248201527f596f7527766520616c726561647920776974686472657720796f75722066756e60448201526264732160e81b6064820152608401610185565b818160000160008282546102cc919061052f565b909155505080546102eb5760028101805460ff191660011790556102f8565b60028101805460ff191690555b8054604051339180156108fc02916000818181858888f19350505050158015610325573d6000803e3d6000fd5b505050565b6001546001600160a01b031633146103a25760405162461bcd60e51b815260206004820152603560248201527f4f6e6c7920746865206772616e746f72206f6620746869732074727573742063604482015274616e2061646420612062656e65666963696172792160581b6064820152608401610185565b6001600160a01b03821660009081526020819052604090205415610430576040805162461bcd60e51b81526020600482015260248101919091527f596f7527766520616c726561647920616464656420746869732062656e65666960448201527f63696172792e2e2e757365206120646966666572656e742061646472657373216064820152608401610185565b6040518060600160405280348152602001824261044d9190610546565b8152600060209182018190526001600160a01b03949094168452838152604093849020825181559082015160018201559201516002909201805460ff19169215159290921790915550565b80356001600160a01b03811681146104af57600080fd5b919050565b6000602082840312156104c657600080fd5b6104cf82610498565b9392505050565b6000602082840312156104e857600080fd5b5035919050565b6000806040838503121561050257600080fd5b61050b83610498565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561054157610541610519565b500390565b6000821982111561055957610559610519565b50019056fea2646970667358221220bb7c3aaa7fbef552fd6e6267dd3f2c3291c1a18271c869c5346a6cdf7758cef764736f6c634300080a0033",
  "deployedSourceMap": "58:1707:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;182:52;;;;;;;;;;-1:-1:-1;182:52:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;579:25:1;;;635:2;620:18;;613:34;;;;690:14;683:22;663:18;;;656:50;567:2;552:18;182:52:0;;;;;;;;887:876;;;;;;;;;;-1:-1:-1;887:876:0;;;;;:::i;:::-;;:::i;:::-;;326:555;;;;;;:::i;:::-;;:::i;240:22::-;;;;;;;;;;-1:-1:-1;240:22:0;;;;-1:-1:-1;;;;;240:22:0;;;;;;-1:-1:-1;;;;;1325:32:1;;;1307:51;;1295:2;1280:18;240:22:0;1161:203:1;887:876:0;994:10;946:31;980:25;;;;;;;;;;1036:23;;;;1063:15;-1:-1:-1;1036:42:0;1015:132;;;;-1:-1:-1;;;1015:132:0;;1571:2:1;1015:132:0;;;1553:21:1;1610:2;1590:18;;;1583:30;1649:34;1629:18;;;1622:62;-1:-1:-1;;;1700:18:1;;;1693:41;1751:19;;1015:132:0;;;;;;;;;1178:18;;:28;-1:-1:-1;1157:127:0;;;;-1:-1:-1;;;1157:127:0;;1983:2:1;1157:127:0;;;1965:21:1;2022:2;2002:18;;;1995:30;2061:34;2041:18;;;2034:62;-1:-1:-1;;;2112:18:1;;;2105:50;2172:19;;1157:127:0;1781:416:1;1157:127:0;1315:18;;1294:106;;;;-1:-1:-1;;;1294:106:0;;2404:2:1;1294:106:0;;;2386:21:1;2443:2;2423:18;;;2416:30;2482:34;2462:18;;;2455:62;-1:-1:-1;;;2533:18:1;;;2526:35;2578:19;;1294:106:0;2202:401:1;1294:106:0;1431:16;;;;;;:25;1410:107;;;;-1:-1:-1;;;1410:107:0;;2810:2:1;1410:107:0;;;2792:21:1;2849:2;2829:18;;;2822:30;2888:34;2868:18;;;2861:62;-1:-1:-1;;;2939:18:1;;;2932:33;2982:19;;1410:107:0;2608:399:1;1410:107:0;1549:7;1527:11;:18;;;:29;;;;;;;:::i;:::-;;;;-1:-1:-1;;1570:18:0;;1566:132;;1609:16;;;:23;;-1:-1:-1;;1609:23:0;1628:4;1609:23;;;1566:132;;;1663:16;;;:24;;-1:-1:-1;;1663:24:0;;;1566:132;1737:18;;1708:48;;1716:10;;1708:48;;;;;1737:18;1708:48;1737:18;1708:48;1737:18;1716:10;1708:48;;;;;;;;;;;;;;;;;;;;;936:827;887:876;:::o;326:555::-;479:7;;-1:-1:-1;;;;;479:7:0;465:10;:21;444:121;;;;-1:-1:-1;;;444:121:0;;3476:2:1;444:121:0;;;3458:21:1;3515:2;3495:18;;;3488:30;3554:34;3534:18;;;3527:62;-1:-1:-1;;;3605:18:1;;;3598:51;3666:19;;444:121:0;3274:417:1;444:121:0;-1:-1:-1;;;;;596:26:0;;:13;:26;;;;;;;;;;:33;:38;575:149;;;;;-1:-1:-1;;;575:149:0;;3898:2:1;575:149:0;;;3880:21:1;3917:18;;;3910:30;;;;3976:34;3956:18;;;3949:62;4047:34;4027:18;;;4020:62;4099:19;;575:149:0;3696:428:1;575:149:0;763:111;;;;;;;;788:9;763:111;;;;829:16;811:15;:34;;;;:::i;:::-;763:111;;859:5;763:111;;;;;;;-1:-1:-1;;;;;734:26:0;;;;;;;;;;;;;;:140;;;;;;;;763:111;734:140;;;;;;;;;;;;-1:-1:-1;;734:140:0;;;;;;;;;;;-1:-1:-1;326:555:0:o;14:173:1:-;82:20;;-1:-1:-1;;;;;131:31:1;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:186::-;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;:::-;333:39;192:186;-1:-1:-1;;;192:186:1:o;717:180::-;776:6;829:2;817:9;808:7;804:23;800:32;797:52;;;845:1;842;835:12;797:52;-1:-1:-1;868:23:1;;717:180;-1:-1:-1;717:180:1:o;902:254::-;970:6;978;1031:2;1019:9;1010:7;1006:23;1002:32;999:52;;;1047:1;1044;1037:12;999:52;1070:29;1089:9;1070:29;:::i;:::-;1060:39;1146:2;1131:18;;;;1118:32;;-1:-1:-1;;;902:254:1:o;3012:127::-;3073:10;3068:3;3064:20;3061:1;3054:31;3104:4;3101:1;3094:15;3128:4;3125:1;3118:15;3144:125;3184:4;3212:1;3209;3206:8;3203:34;;;3217:18;;:::i;:::-;-1:-1:-1;3254:9:1;;3144:125::o;4129:128::-;4169:3;4200:1;4196:6;4193:1;4190:13;4187:39;;;4206:18;;:::i;:::-;-1:-1:-1;4242:9:1;;4129:128::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    58,
    1765
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1567739 EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x155DD5EE EQ PUSH2 0xA5 JUMPI DUP1 PUSH4 0x96074E70 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0xBAB253B3 EQ PUSH2 0xDA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x83 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x4B4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC5 PUSH2 0xC0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D6 JUMP JUMPDEST PUSH2 0x112 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC5 PUSH2 0xD5 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EF JUMP JUMPDEST PUSH2 0x32A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0xFA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x9C JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 0x18E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752063616E277420776974686472617720756E74696C20796F7572207265 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x3632B0B9B2903230BA3297 PUSH1 0xA9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD DUP3 LT PUSH2 0x1FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752063616E2774207769746864726177206D6F7265207468616E20796F75 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x39103932B6B0B4B734B733903130B630B731B297 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x185 JUMP JUMPDEST DUP1 SLOAD PUSH2 0x257 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520616D6F756E7420746F20776974687261772063616E6E6F7420626520 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x3D32B93797 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x185 JUMP JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7527766520616C726561647920776974686472657720796F75722066756E PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x647321 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x185 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2CC SWAP2 SWAP1 PUSH2 0x52F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 SLOAD PUSH2 0x2EB JUMPI PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x2F8 JUMP JUMPDEST PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMPDEST DUP1 SLOAD PUSH1 0x40 MLOAD CALLER SWAP2 DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x325 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C7920746865206772616E746F72206F6620746869732074727573742063 PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x616E2061646420612062656E656669636961727921 PUSH1 0x58 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x185 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x430 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x596F7527766520616C726561647920616464656420746869732062656E656669 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x63696172792E2E2E757365206120646966666572656E74206164647265737321 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x185 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 CALLVALUE DUP2 MSTORE PUSH1 0x20 ADD DUP3 TIMESTAMP PUSH2 0x44D SWAP2 SWAP1 PUSH2 0x546 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP5 MSTORE DUP4 DUP2 MSTORE PUSH1 0x40 SWAP4 DUP5 SWAP1 KECCAK256 DUP3 MLOAD DUP2 SSTORE SWAP1 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE SWAP3 ADD MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4CF DUP3 PUSH2 0x498 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x50B DUP4 PUSH2 0x498 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x541 JUMPI PUSH2 0x541 PUSH2 0x519 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x559 JUMPI PUSH2 0x559 PUSH2 0x519 JUMP JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB PUSH29 0x3AAA7FBEF552FD6E6267DD3F2C3291C1A18271C869C5346A6CDF7758CE 0xF7 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        58,
        1765
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "LT",
      "path": "0"
    },
    "9": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3F"
    },
    "12": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "13": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "SHR",
      "path": "0"
    },
    "19": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "DUP1",
      "path": "0"
    },
    "20": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x1567739"
    },
    "25": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "EQ",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x44"
    },
    "29": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "30": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "DUP1",
      "path": "0"
    },
    "31": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x155DD5EE"
    },
    "36": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "EQ",
      "path": "0"
    },
    "37": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA5"
    },
    "40": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "41": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "DUP1",
      "path": "0"
    },
    "42": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x96074E70"
    },
    "47": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "EQ",
      "path": "0"
    },
    "48": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC7"
    },
    "51": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "52": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "DUP1",
      "path": "0"
    },
    "53": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xBAB253B3"
    },
    "58": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "EQ",
      "path": "0"
    },
    "59": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDA"
    },
    "62": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "63": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "64": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "66": {
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "DUP1",
      "path": "0"
    },
    "67": {
      "first_revert": true,
      "fn": null,
      "offset": [
        58,
        1765
      ],
      "op": "REVERT",
      "path": "0"
    },
    "68": {
      "offset": [
        182,
        234
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "69": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "70": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "DUP1",
      "path": "0"
    },
    "71": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "72": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x50"
    },
    "75": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "76": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "78": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "DUP1",
      "path": "0"
    },
    "79": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "REVERT",
      "path": "0"
    },
    "80": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "81": {
      "op": "POP"
    },
    "82": {
      "offset": [
        182,
        234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x83"
    },
    "85": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5F"
    },
    "88": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "89": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "91": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4B4"
    },
    "94": {
      "fn": null,
      "jump": "i",
      "offset": [
        182,
        234
      ],
      "op": "JUMP",
      "path": "0"
    },
    "95": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "96": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "98": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "100": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "DUP2",
      "path": "0"
    },
    "101": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "102": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "103": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "104": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "DUP2",
      "path": "0"
    },
    "105": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "106": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "108": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "109": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "110": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "DUP1",
      "path": "0"
    },
    "111": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "112": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "114": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "DUP3",
      "path": "0"
    },
    "115": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "ADD",
      "path": "0"
    },
    "116": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "117": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "119": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "120": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "121": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "ADD",
      "path": "0"
    },
    "122": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "123": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "124": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "125": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "126": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "128": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "AND",
      "path": "0"
    },
    "129": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "DUP4",
      "path": "0"
    },
    "130": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "JUMP",
      "path": "0"
    },
    "131": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "132": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "134": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "DUP1",
      "path": "0"
    },
    "135": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "136": {
      "op": "SWAP4"
    },
    "137": {
      "op": "DUP5"
    },
    "138": {
      "op": "MSTORE"
    },
    "139": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "141": {
      "op": "DUP5"
    },
    "142": {
      "op": "ADD"
    },
    "143": {
      "op": "SWAP3"
    },
    "144": {
      "op": "SWAP1"
    },
    "145": {
      "op": "SWAP3"
    },
    "146": {
      "op": "MSTORE"
    },
    "147": {
      "op": "ISZERO"
    },
    "148": {
      "op": "ISZERO"
    },
    "149": {
      "op": "SWAP1"
    },
    "150": {
      "op": "DUP3"
    },
    "151": {
      "op": "ADD"
    },
    "152": {
      "op": "MSTORE"
    },
    "153": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "155": {
      "op": "ADD"
    },
    "156": {
      "offset": [
        182,
        234
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "157": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "159": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "160": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "DUP1",
      "path": "0"
    },
    "161": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "162": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SUB",
      "path": "0"
    },
    "163": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "164": {
      "fn": null,
      "offset": [
        182,
        234
      ],
      "op": "RETURN",
      "path": "0"
    },
    "165": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "166": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "167": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "DUP1",
      "path": "0"
    },
    "168": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "169": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB1"
    },
    "172": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "173": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "175": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "DUP1",
      "path": "0"
    },
    "176": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "REVERT",
      "path": "0"
    },
    "177": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "178": {
      "op": "POP"
    },
    "179": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC5"
    },
    "182": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC0"
    },
    "185": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "186": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "188": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4D6"
    },
    "191": {
      "fn": "Trust.withdrawFunds",
      "jump": "i",
      "offset": [
        887,
        1763
      ],
      "op": "JUMP",
      "path": "0"
    },
    "192": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "193": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x112"
    },
    "196": {
      "fn": "Trust.withdrawFunds",
      "jump": "i",
      "offset": [
        887,
        1763
      ],
      "op": "JUMP",
      "path": "0"
    },
    "197": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "198": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "STOP",
      "path": "0"
    },
    "199": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        326,
        881
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "200": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        326,
        881
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC5"
    },
    "203": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        326,
        881
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD5"
    },
    "206": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        326,
        881
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "207": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        326,
        881
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "209": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        326,
        881
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4EF"
    },
    "212": {
      "fn": "Trust.addBeneficiary",
      "jump": "i",
      "offset": [
        326,
        881
      ],
      "op": "JUMP",
      "path": "0"
    },
    "213": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        326,
        881
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "214": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        326,
        881
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x32A"
    },
    "217": {
      "fn": "Trust.addBeneficiary",
      "jump": "i",
      "offset": [
        326,
        881
      ],
      "op": "JUMP",
      "path": "0"
    },
    "218": {
      "offset": [
        240,
        262
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "219": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "220": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "DUP1",
      "path": "0"
    },
    "221": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "222": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE6"
    },
    "225": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "226": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "228": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "DUP1",
      "path": "0"
    },
    "229": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "REVERT",
      "path": "0"
    },
    "230": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "231": {
      "op": "POP"
    },
    "232": {
      "offset": [
        240,
        262
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "234": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "235": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFA"
    },
    "238": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "239": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "241": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "243": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "245": {
      "op": "SHL"
    },
    "246": {
      "op": "SUB"
    },
    "247": {
      "offset": [
        240,
        262
      ],
      "op": "AND",
      "path": "0"
    },
    "248": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "DUP2",
      "path": "0"
    },
    "249": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "JUMP",
      "path": "0"
    },
    "250": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "251": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "253": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        240,
        262
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "254": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "256": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "258": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "260": {
      "op": "SHL"
    },
    "261": {
      "op": "SUB"
    },
    "262": {
      "op": "SWAP1"
    },
    "263": {
      "op": "SWAP2"
    },
    "264": {
      "op": "AND"
    },
    "265": {
      "op": "DUP2"
    },
    "266": {
      "op": "MSTORE"
    },
    "267": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "269": {
      "op": "ADD"
    },
    "270": {
      "offset": [
        240,
        262
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9C"
    },
    "273": {
      "op": "JUMP"
    },
    "274": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "275": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        994,
        1004
      ],
      "op": "CALLER",
      "path": "0"
    },
    "276": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        946,
        977
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "278": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        980,
        1005
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "279": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        980,
        1005
      ],
      "op": "DUP2",
      "path": "0"
    },
    "280": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        980,
        1005
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "281": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        980,
        1005
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "283": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        980,
        1005
      ],
      "op": "DUP2",
      "path": "0"
    },
    "284": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        980,
        1005
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "285": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        980,
        1005
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "286": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        980,
        1005
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "288": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        980,
        1005
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "289": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        980,
        1005
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "290": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1036,
        1059
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x1"
    },
    "292": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1036,
        1059
      ],
      "op": "DUP2",
      "path": "0"
    },
    "293": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1036,
        1059
      ],
      "op": "ADD",
      "path": "0"
    },
    "294": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1036,
        1059
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "295": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1063,
        1078
      ],
      "op": "TIMESTAMP",
      "path": "0"
    },
    "296": {
      "op": "LT"
    },
    "297": {
      "branch": 11,
      "fn": "Trust.withdrawFunds",
      "offset": [
        1036,
        1078
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "298": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18E"
    },
    "301": {
      "branch": 11,
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "302": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "304": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "305": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "309": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "311": {
      "op": "SHL"
    },
    "312": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "DUP2",
      "path": "0"
    },
    "313": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "314": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "316": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "318": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "DUP3",
      "path": "0"
    },
    "319": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "ADD",
      "path": "0"
    },
    "320": {
      "op": "MSTORE"
    },
    "321": {
      "op": "PUSH1",
      "value": "0x2B"
    },
    "323": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "325": {
      "op": "DUP3"
    },
    "326": {
      "op": "ADD"
    },
    "327": {
      "op": "MSTORE"
    },
    "328": {
      "op": "PUSH32",
      "value": "0x596F752063616E277420776974686472617720756E74696C20796F7572207265"
    },
    "361": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "363": {
      "op": "DUP3"
    },
    "364": {
      "op": "ADD"
    },
    "365": {
      "op": "MSTORE"
    },
    "366": {
      "op": "PUSH11",
      "value": "0x3632B0B9B2903230BA3297"
    },
    "378": {
      "op": "PUSH1",
      "value": "0xA9"
    },
    "380": {
      "op": "SHL"
    },
    "381": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "383": {
      "op": "DUP3"
    },
    "384": {
      "op": "ADD"
    },
    "385": {
      "op": "MSTORE"
    },
    "386": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "388": {
      "op": "ADD"
    },
    "389": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "390": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "392": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "393": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "DUP1",
      "path": "0"
    },
    "394": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "395": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "SUB",
      "path": "0"
    },
    "396": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "397": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "398": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1015,
        1147
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "399": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1178,
        1196
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 1
    },
    "400": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1178,
        1196
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "401": {
      "branch": 12,
      "fn": "Trust.withdrawFunds",
      "offset": [
        1178,
        1206
      ],
      "op": "DUP3",
      "path": "0"
    },
    "402": {
      "op": "LT"
    },
    "403": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1157,
        1284
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1FB"
    },
    "406": {
      "branch": 12,
      "fn": "Trust.withdrawFunds",
      "offset": [
        1157,
        1284
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "407": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1157,
        1284
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "409": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1157,
        1284
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "410": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "414": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "416": {
      "op": "SHL"
    },
    "417": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1157,
        1284
      ],
      "op": "DUP2",
      "path": "0"
    },
    "418": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1157,
        1284
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "419": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "421": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1157,
        1284
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "423": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1157,
        1284
      ],
      "op": "DUP3",
      "path": "0"
    },
    "424": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1157,
        1284
      ],
      "op": "ADD",
      "path": "0"
    },
    "425": {
      "op": "MSTORE"
    },
    "426": {
      "op": "PUSH1",
      "value": "0x34"
    },
    "428": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "430": {
      "op": "DUP3"
    },
    "431": {
      "op": "ADD"
    },
    "432": {
      "op": "MSTORE"
    },
    "433": {
      "op": "PUSH32",
      "value": "0x596F752063616E2774207769746864726177206D6F7265207468616E20796F75"
    },
    "466": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "468": {
      "op": "DUP3"
    },
    "469": {
      "op": "ADD"
    },
    "470": {
      "op": "MSTORE"
    },
    "471": {
      "op": "PUSH20",
      "value": "0x39103932B6B0B4B734B733903130B630B731B297"
    },
    "492": {
      "op": "PUSH1",
      "value": "0x61"
    },
    "494": {
      "op": "SHL"
    },
    "495": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "497": {
      "op": "DUP3"
    },
    "498": {
      "op": "ADD"
    },
    "499": {
      "op": "MSTORE"
    },
    "500": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "502": {
      "op": "ADD"
    },
    "503": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1157,
        1284
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185"
    },
    "506": {
      "op": "JUMP"
    },
    "507": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1157,
        1284
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "508": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1315,
        1333
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 2
    },
    "509": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1315,
        1333
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "510": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1294,
        1400
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x257"
    },
    "513": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1294,
        1400
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "514": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1294,
        1400
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "516": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1294,
        1400
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "517": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "521": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "523": {
      "op": "SHL"
    },
    "524": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1294,
        1400
      ],
      "op": "DUP2",
      "path": "0"
    },
    "525": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1294,
        1400
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "526": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "528": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1294,
        1400
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "530": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1294,
        1400
      ],
      "op": "DUP3",
      "path": "0"
    },
    "531": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1294,
        1400
      ],
      "op": "ADD",
      "path": "0"
    },
    "532": {
      "op": "MSTORE"
    },
    "533": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "535": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "537": {
      "op": "DUP3"
    },
    "538": {
      "op": "ADD"
    },
    "539": {
      "op": "MSTORE"
    },
    "540": {
      "op": "PUSH32",
      "value": "0x54686520616D6F756E7420746F20776974687261772063616E6E6F7420626520"
    },
    "573": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "575": {
      "op": "DUP3"
    },
    "576": {
      "op": "ADD"
    },
    "577": {
      "op": "MSTORE"
    },
    "578": {
      "op": "PUSH5",
      "value": "0x3D32B93797"
    },
    "584": {
      "op": "PUSH1",
      "value": "0xD9"
    },
    "586": {
      "op": "SHL"
    },
    "587": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "589": {
      "op": "DUP3"
    },
    "590": {
      "op": "ADD"
    },
    "591": {
      "op": "MSTORE"
    },
    "592": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "594": {
      "op": "ADD"
    },
    "595": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1294,
        1400
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185"
    },
    "598": {
      "op": "JUMP"
    },
    "599": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1294,
        1400
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "600": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1431,
        1447
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 3,
      "value": "0x2"
    },
    "602": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1431,
        1447
      ],
      "op": "DUP2",
      "path": "0"
    },
    "603": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1431,
        1447
      ],
      "op": "ADD",
      "path": "0"
    },
    "604": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1431,
        1447
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "605": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1431,
        1447
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "607": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1431,
        1447
      ],
      "op": "AND",
      "path": "0"
    },
    "608": {
      "branch": 13,
      "fn": "Trust.withdrawFunds",
      "offset": [
        1431,
        1456
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "609": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1410,
        1517
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B8"
    },
    "612": {
      "branch": 13,
      "fn": "Trust.withdrawFunds",
      "offset": [
        1410,
        1517
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "613": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1410,
        1517
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "615": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1410,
        1517
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "616": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "620": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "622": {
      "op": "SHL"
    },
    "623": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1410,
        1517
      ],
      "op": "DUP2",
      "path": "0"
    },
    "624": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1410,
        1517
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "625": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "627": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1410,
        1517
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "629": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1410,
        1517
      ],
      "op": "DUP3",
      "path": "0"
    },
    "630": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1410,
        1517
      ],
      "op": "ADD",
      "path": "0"
    },
    "631": {
      "op": "MSTORE"
    },
    "632": {
      "op": "PUSH1",
      "value": "0x23"
    },
    "634": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "636": {
      "op": "DUP3"
    },
    "637": {
      "op": "ADD"
    },
    "638": {
      "op": "MSTORE"
    },
    "639": {
      "op": "PUSH32",
      "value": "0x596F7527766520616C726561647920776974686472657720796F75722066756E"
    },
    "672": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "674": {
      "op": "DUP3"
    },
    "675": {
      "op": "ADD"
    },
    "676": {
      "op": "MSTORE"
    },
    "677": {
      "op": "PUSH3",
      "value": "0x647321"
    },
    "681": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "683": {
      "op": "SHL"
    },
    "684": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "686": {
      "op": "DUP3"
    },
    "687": {
      "op": "ADD"
    },
    "688": {
      "op": "MSTORE"
    },
    "689": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "691": {
      "op": "ADD"
    },
    "692": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1410,
        1517
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185"
    },
    "695": {
      "op": "JUMP"
    },
    "696": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1410,
        1517
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "697": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1549,
        1556
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 4
    },
    "698": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1538
      ],
      "op": "DUP2",
      "path": "0"
    },
    "699": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1545
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "701": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1545
      ],
      "op": "ADD",
      "path": "0"
    },
    "702": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1545
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "704": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1556
      ],
      "op": "DUP3",
      "path": "0"
    },
    "705": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1556
      ],
      "op": "DUP3",
      "path": "0"
    },
    "706": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1556
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "707": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1556
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2CC"
    },
    "710": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1556
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "711": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1556
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "712": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1556
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x52F"
    },
    "715": {
      "fn": "Trust.withdrawFunds",
      "jump": "i",
      "offset": [
        1527,
        1556
      ],
      "op": "JUMP",
      "path": "0"
    },
    "716": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1556
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "717": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1556
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "718": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1556
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "719": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1527,
        1556
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "720": {
      "op": "POP"
    },
    "721": {
      "op": "POP"
    },
    "722": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1570,
        1588
      ],
      "op": "DUP1",
      "path": "0"
    },
    "723": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1570,
        1588
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "724": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1566,
        1698
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2EB"
    },
    "727": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1566,
        1698
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "728": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1609,
        1625
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 5,
      "value": "0x2"
    },
    "730": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1609,
        1625
      ],
      "op": "DUP2",
      "path": "0"
    },
    "731": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1609,
        1625
      ],
      "op": "ADD",
      "path": "0"
    },
    "732": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1609,
        1632
      ],
      "op": "DUP1",
      "path": "0"
    },
    "733": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1609,
        1632
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "734": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "736": {
      "op": "NOT"
    },
    "737": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1609,
        1632
      ],
      "op": "AND",
      "path": "0"
    },
    "738": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1628,
        1632
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "740": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1609,
        1632
      ],
      "op": "OR",
      "path": "0"
    },
    "741": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1609,
        1632
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "742": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1609,
        1632
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "743": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1566,
        1698
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2F8"
    },
    "746": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1566,
        1698
      ],
      "op": "JUMP",
      "path": "0"
    },
    "747": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1566,
        1698
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "748": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1663,
        1679
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 6,
      "value": "0x2"
    },
    "750": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1663,
        1679
      ],
      "op": "DUP2",
      "path": "0"
    },
    "751": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1663,
        1679
      ],
      "op": "ADD",
      "path": "0"
    },
    "752": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1663,
        1687
      ],
      "op": "DUP1",
      "path": "0"
    },
    "753": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1663,
        1687
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "754": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "756": {
      "op": "NOT"
    },
    "757": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1663,
        1687
      ],
      "op": "AND",
      "path": "0"
    },
    "758": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1663,
        1687
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "759": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1663,
        1687
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "760": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1566,
        1698
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "761": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1737,
        1755
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 7
    },
    "762": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1737,
        1755
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "763": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "765": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "766": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1716,
        1726
      ],
      "op": "CALLER",
      "path": "0"
    },
    "767": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1716,
        1726
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "768": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "DUP1",
      "path": "0"
    },
    "769": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "770": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8FC"
    },
    "773": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "MUL",
      "path": "0"
    },
    "774": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "775": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1737,
        1755
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "777": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "DUP2",
      "path": "0"
    },
    "778": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1737,
        1755
      ],
      "op": "DUP2",
      "path": "0"
    },
    "779": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "DUP2",
      "path": "0"
    },
    "780": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1737,
        1755
      ],
      "op": "DUP6",
      "path": "0"
    },
    "781": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1716,
        1726
      ],
      "op": "DUP9",
      "path": "0"
    },
    "782": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "DUP9",
      "path": "0"
    },
    "783": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "CALL",
      "path": "0"
    },
    "784": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "785": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "POP",
      "path": "0"
    },
    "786": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "POP",
      "path": "0"
    },
    "787": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "POP",
      "path": "0"
    },
    "788": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "POP",
      "path": "0"
    },
    "789": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "790": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "DUP1",
      "path": "0"
    },
    "791": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "792": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x325"
    },
    "795": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "796": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "797": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "799": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "DUP1",
      "path": "0"
    },
    "800": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "801": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "802": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "804": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "REVERT",
      "path": "0"
    },
    "805": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "806": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        1708,
        1756
      ],
      "op": "POP",
      "path": "0"
    },
    "807": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        936,
        1763
      ],
      "op": "POP",
      "path": "0"
    },
    "808": {
      "fn": "Trust.withdrawFunds",
      "offset": [
        887,
        1763
      ],
      "op": "POP",
      "path": "0"
    },
    "809": {
      "fn": "Trust.withdrawFunds",
      "jump": "o",
      "offset": [
        887,
        1763
      ],
      "op": "JUMP",
      "path": "0"
    },
    "810": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        326,
        881
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "811": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        479,
        486
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 8,
      "value": "0x1"
    },
    "813": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        479,
        486
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "814": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "816": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "818": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "820": {
      "op": "SHL"
    },
    "821": {
      "op": "SUB"
    },
    "822": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        479,
        486
      ],
      "op": "AND",
      "path": "0"
    },
    "823": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        465,
        475
      ],
      "op": "CALLER",
      "path": "0"
    },
    "824": {
      "branch": 14,
      "fn": "Trust.addBeneficiary",
      "offset": [
        465,
        486
      ],
      "op": "EQ",
      "path": "0"
    },
    "825": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        444,
        565
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3A2"
    },
    "828": {
      "branch": 14,
      "fn": "Trust.addBeneficiary",
      "offset": [
        444,
        565
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "829": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        444,
        565
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "831": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        444,
        565
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "832": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "836": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "838": {
      "op": "SHL"
    },
    "839": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        444,
        565
      ],
      "op": "DUP2",
      "path": "0"
    },
    "840": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        444,
        565
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "841": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "843": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        444,
        565
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "845": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        444,
        565
      ],
      "op": "DUP3",
      "path": "0"
    },
    "846": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        444,
        565
      ],
      "op": "ADD",
      "path": "0"
    },
    "847": {
      "op": "MSTORE"
    },
    "848": {
      "op": "PUSH1",
      "value": "0x35"
    },
    "850": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "852": {
      "op": "DUP3"
    },
    "853": {
      "op": "ADD"
    },
    "854": {
      "op": "MSTORE"
    },
    "855": {
      "op": "PUSH32",
      "value": "0x4F6E6C7920746865206772616E746F72206F6620746869732074727573742063"
    },
    "888": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "890": {
      "op": "DUP3"
    },
    "891": {
      "op": "ADD"
    },
    "892": {
      "op": "MSTORE"
    },
    "893": {
      "op": "PUSH21",
      "value": "0x616E2061646420612062656E656669636961727921"
    },
    "915": {
      "op": "PUSH1",
      "value": "0x58"
    },
    "917": {
      "op": "SHL"
    },
    "918": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "920": {
      "op": "DUP3"
    },
    "921": {
      "op": "ADD"
    },
    "922": {
      "op": "MSTORE"
    },
    "923": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "925": {
      "op": "ADD"
    },
    "926": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        444,
        565
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185"
    },
    "929": {
      "op": "JUMP"
    },
    "930": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        444,
        565
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "931": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "933": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "935": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "937": {
      "op": "SHL"
    },
    "938": {
      "op": "SUB"
    },
    "939": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        622
      ],
      "op": "DUP3",
      "path": "0",
      "statement": 9
    },
    "940": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        622
      ],
      "op": "AND",
      "path": "0"
    },
    "941": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        609
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "943": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        622
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "944": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        622
      ],
      "op": "DUP2",
      "path": "0"
    },
    "945": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        622
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "946": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        622
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "948": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        622
      ],
      "op": "DUP2",
      "path": "0"
    },
    "949": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        622
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "950": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        622
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "951": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        622
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "953": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        622
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "954": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        622
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "955": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        629
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "956": {
      "branch": 15,
      "fn": "Trust.addBeneficiary",
      "offset": [
        596,
        634
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "957": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        575,
        724
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x430"
    },
    "960": {
      "branch": 15,
      "fn": "Trust.addBeneficiary",
      "offset": [
        575,
        724
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "961": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        575,
        724
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "963": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        575,
        724
      ],
      "op": "DUP1",
      "path": "0"
    },
    "964": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        575,
        724
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "965": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "969": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "971": {
      "op": "SHL"
    },
    "972": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        575,
        724
      ],
      "op": "DUP2",
      "path": "0"
    },
    "973": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        575,
        724
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "974": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "976": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        575,
        724
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "978": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        575,
        724
      ],
      "op": "DUP3",
      "path": "0"
    },
    "979": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        575,
        724
      ],
      "op": "ADD",
      "path": "0"
    },
    "980": {
      "op": "MSTORE"
    },
    "981": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "983": {
      "op": "DUP2"
    },
    "984": {
      "op": "ADD"
    },
    "985": {
      "op": "SWAP2"
    },
    "986": {
      "op": "SWAP1"
    },
    "987": {
      "op": "SWAP2"
    },
    "988": {
      "op": "MSTORE"
    },
    "989": {
      "op": "PUSH32",
      "value": "0x596F7527766520616C726561647920616464656420746869732062656E656669"
    },
    "1022": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1024": {
      "op": "DUP3"
    },
    "1025": {
      "op": "ADD"
    },
    "1026": {
      "op": "MSTORE"
    },
    "1027": {
      "op": "PUSH32",
      "value": "0x63696172792E2E2E757365206120646966666572656E74206164647265737321"
    },
    "1060": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1062": {
      "op": "DUP3"
    },
    "1063": {
      "op": "ADD"
    },
    "1064": {
      "op": "MSTORE"
    },
    "1065": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1067": {
      "op": "ADD"
    },
    "1068": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        575,
        724
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x185"
    },
    "1071": {
      "op": "JUMP"
    },
    "1072": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        575,
        724
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1073": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 10,
      "value": "0x40"
    },
    "1075": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1076": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1077": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "1079": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "ADD",
      "path": "0"
    },
    "1080": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1082": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1083": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1084": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        788,
        797
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "1085": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1086": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1087": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1089": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "ADD",
      "path": "0"
    },
    "1090": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        829,
        845
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1091": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        811,
        826
      ],
      "op": "TIMESTAMP",
      "path": "0"
    },
    "1092": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        811,
        845
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x44D"
    },
    "1095": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        811,
        845
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1096": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        811,
        845
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1097": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        811,
        845
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x546"
    },
    "1100": {
      "fn": "Trust.addBeneficiary",
      "jump": "i",
      "offset": [
        811,
        845
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1101": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        811,
        845
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1102": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1103": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1104": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        859,
        864
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1106": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "1108": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1109": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1110": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "ADD",
      "path": "0"
    },
    "1111": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1112": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1113": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1114": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1118": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1120": {
      "op": "SHL"
    },
    "1121": {
      "op": "SUB"
    },
    "1122": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "1123": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1124": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "1125": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "AND",
      "path": "0"
    },
    "1126": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1127": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1128": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1129": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1130": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1131": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1133": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "1134": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1135": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1136": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        760
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "1137": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1138": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1139": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1140": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1141": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1142": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1143": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "ADD",
      "path": "0"
    },
    "1144": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1145": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        763,
        874
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "1147": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1148": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "ADD",
      "path": "0"
    },
    "1149": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1150": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1151": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "ADD",
      "path": "0"
    },
    "1152": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1153": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "1155": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1156": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1157": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "ADD",
      "path": "0"
    },
    "1158": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1159": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1160": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1162": {
      "op": "NOT"
    },
    "1163": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "AND",
      "path": "0"
    },
    "1164": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1165": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1166": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "1167": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1168": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1169": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1170": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "OR",
      "path": "0"
    },
    "1171": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1172": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1173": {
      "fn": "Trust.addBeneficiary",
      "offset": [
        734,
        874
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1174": {
      "op": "POP"
    },
    "1175": {
      "fn": "Trust.addBeneficiary",
      "jump": "o",
      "offset": [
        326,
        881
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1176": {
      "op": "JUMPDEST"
    },
    "1177": {
      "op": "DUP1"
    },
    "1178": {
      "op": "CALLDATALOAD"
    },
    "1179": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1181": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1183": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1185": {
      "op": "SHL"
    },
    "1186": {
      "op": "SUB"
    },
    "1187": {
      "op": "DUP2"
    },
    "1188": {
      "op": "AND"
    },
    "1189": {
      "op": "DUP2"
    },
    "1190": {
      "op": "EQ"
    },
    "1191": {
      "op": "PUSH2",
      "value": "0x4AF"
    },
    "1194": {
      "op": "JUMPI"
    },
    "1195": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1197": {
      "op": "DUP1"
    },
    "1198": {
      "op": "REVERT"
    },
    "1199": {
      "op": "JUMPDEST"
    },
    "1200": {
      "op": "SWAP2"
    },
    "1201": {
      "op": "SWAP1"
    },
    "1202": {
      "op": "POP"
    },
    "1203": {
      "jump": "o",
      "op": "JUMP"
    },
    "1204": {
      "op": "JUMPDEST"
    },
    "1205": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1207": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1209": {
      "op": "DUP3"
    },
    "1210": {
      "op": "DUP5"
    },
    "1211": {
      "op": "SUB"
    },
    "1212": {
      "op": "SLT"
    },
    "1213": {
      "op": "ISZERO"
    },
    "1214": {
      "op": "PUSH2",
      "value": "0x4C6"
    },
    "1217": {
      "op": "JUMPI"
    },
    "1218": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1220": {
      "op": "DUP1"
    },
    "1221": {
      "op": "REVERT"
    },
    "1222": {
      "op": "JUMPDEST"
    },
    "1223": {
      "op": "PUSH2",
      "value": "0x4CF"
    },
    "1226": {
      "op": "DUP3"
    },
    "1227": {
      "op": "PUSH2",
      "value": "0x498"
    },
    "1230": {
      "jump": "i",
      "op": "JUMP"
    },
    "1231": {
      "op": "JUMPDEST"
    },
    "1232": {
      "op": "SWAP4"
    },
    "1233": {
      "op": "SWAP3"
    },
    "1234": {
      "op": "POP"
    },
    "1235": {
      "op": "POP"
    },
    "1236": {
      "op": "POP"
    },
    "1237": {
      "jump": "o",
      "op": "JUMP"
    },
    "1238": {
      "op": "JUMPDEST"
    },
    "1239": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1241": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1243": {
      "op": "DUP3"
    },
    "1244": {
      "op": "DUP5"
    },
    "1245": {
      "op": "SUB"
    },
    "1246": {
      "op": "SLT"
    },
    "1247": {
      "op": "ISZERO"
    },
    "1248": {
      "op": "PUSH2",
      "value": "0x4E8"
    },
    "1251": {
      "op": "JUMPI"
    },
    "1252": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1254": {
      "op": "DUP1"
    },
    "1255": {
      "op": "REVERT"
    },
    "1256": {
      "op": "JUMPDEST"
    },
    "1257": {
      "op": "POP"
    },
    "1258": {
      "op": "CALLDATALOAD"
    },
    "1259": {
      "op": "SWAP2"
    },
    "1260": {
      "op": "SWAP1"
    },
    "1261": {
      "op": "POP"
    },
    "1262": {
      "jump": "o",
      "op": "JUMP"
    },
    "1263": {
      "op": "JUMPDEST"
    },
    "1264": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1266": {
      "op": "DUP1"
    },
    "1267": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1269": {
      "op": "DUP4"
    },
    "1270": {
      "op": "DUP6"
    },
    "1271": {
      "op": "SUB"
    },
    "1272": {
      "op": "SLT"
    },
    "1273": {
      "op": "ISZERO"
    },
    "1274": {
      "op": "PUSH2",
      "value": "0x502"
    },
    "1277": {
      "op": "JUMPI"
    },
    "1278": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1280": {
      "op": "DUP1"
    },
    "1281": {
      "op": "REVERT"
    },
    "1282": {
      "op": "JUMPDEST"
    },
    "1283": {
      "op": "PUSH2",
      "value": "0x50B"
    },
    "1286": {
      "op": "DUP4"
    },
    "1287": {
      "op": "PUSH2",
      "value": "0x498"
    },
    "1290": {
      "jump": "i",
      "op": "JUMP"
    },
    "1291": {
      "op": "JUMPDEST"
    },
    "1292": {
      "op": "SWAP5"
    },
    "1293": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1295": {
      "op": "SWAP4"
    },
    "1296": {
      "op": "SWAP1"
    },
    "1297": {
      "op": "SWAP4"
    },
    "1298": {
      "op": "ADD"
    },
    "1299": {
      "op": "CALLDATALOAD"
    },
    "1300": {
      "op": "SWAP4"
    },
    "1301": {
      "op": "POP"
    },
    "1302": {
      "op": "POP"
    },
    "1303": {
      "op": "POP"
    },
    "1304": {
      "jump": "o",
      "op": "JUMP"
    },
    "1305": {
      "op": "JUMPDEST"
    },
    "1306": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1311": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1313": {
      "op": "SHL"
    },
    "1314": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1316": {
      "op": "MSTORE"
    },
    "1317": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "1319": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1321": {
      "op": "MSTORE"
    },
    "1322": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1324": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1326": {
      "op": "REVERT"
    },
    "1327": {
      "op": "JUMPDEST"
    },
    "1328": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1330": {
      "op": "DUP3"
    },
    "1331": {
      "op": "DUP3"
    },
    "1332": {
      "op": "LT"
    },
    "1333": {
      "op": "ISZERO"
    },
    "1334": {
      "op": "PUSH2",
      "value": "0x541"
    },
    "1337": {
      "op": "JUMPI"
    },
    "1338": {
      "op": "PUSH2",
      "value": "0x541"
    },
    "1341": {
      "op": "PUSH2",
      "value": "0x519"
    },
    "1344": {
      "jump": "i",
      "op": "JUMP"
    },
    "1345": {
      "op": "JUMPDEST"
    },
    "1346": {
      "op": "POP"
    },
    "1347": {
      "op": "SUB"
    },
    "1348": {
      "op": "SWAP1"
    },
    "1349": {
      "jump": "o",
      "op": "JUMP"
    },
    "1350": {
      "op": "JUMPDEST"
    },
    "1351": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1353": {
      "op": "DUP3"
    },
    "1354": {
      "op": "NOT"
    },
    "1355": {
      "op": "DUP3"
    },
    "1356": {
      "op": "GT"
    },
    "1357": {
      "op": "ISZERO"
    },
    "1358": {
      "op": "PUSH2",
      "value": "0x559"
    },
    "1361": {
      "op": "JUMPI"
    },
    "1362": {
      "op": "PUSH2",
      "value": "0x559"
    },
    "1365": {
      "op": "PUSH2",
      "value": "0x519"
    },
    "1368": {
      "jump": "i",
      "op": "JUMP"
    },
    "1369": {
      "op": "JUMPDEST"
    },
    "1370": {
      "op": "POP"
    },
    "1371": {
      "op": "ADD"
    },
    "1372": {
      "op": "SWAP1"
    },
    "1373": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "502558b2f6da8fee661eb49620f82a29b4a72df3",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract Trust {\n    struct Beneficiary {\n        uint256 amount;\n        uint256 releaseDate;\n        bool paid;\n    }\n    mapping(address => Beneficiary) public beneficiaries;\n    address public grantor;\n\n    constructor() {\n        grantor = msg.sender;\n    }\n\n    function addBeneficiary(address beneficiary, uint256 timeUntilRelease)\n        external\n        payable\n    {\n        require(\n            msg.sender == grantor,\n            \"Only the grantor of this trust can add a beneficiary!\"\n        );\n        require(\n            beneficiaries[beneficiary].amount == 0,\n            \"You've already added this beneficiary...use a different address!\"\n        );\n        beneficiaries[beneficiary] = Beneficiary(\n            msg.value,\n            block.timestamp + timeUntilRelease,\n            false\n        );\n    }\n\n    function withdrawFunds(uint256 _amount) external {\n        Beneficiary storage beneficiary = beneficiaries[msg.sender];\n        require(\n            beneficiary.releaseDate <= block.timestamp,\n            \"You can't withdraw until your release date.\"\n        );\n        require(\n            beneficiary.amount > _amount,\n            \"You can't withdraw more than your remaining balance.\"\n        );\n        require(\n            beneficiary.amount > 0,\n            \"The amount to withraw cannot be zero.\"\n        );\n        require(\n            beneficiary.paid == false,\n            \"You've already withdrew your funds!\"\n        );\n        beneficiary.amount -= _amount;\n        if (beneficiary.amount <= 0) {\n            beneficiary.paid = true;\n        } else {\n            beneficiary.paid = false;\n        }\n\n        payable(msg.sender).transfer(beneficiary.amount);\n    }\n}\n",
  "sourceMap": "58:1707:0:-:0;;;269:51;;;;;;;;;-1:-1:-1;293:7:0;:20;;-1:-1:-1;;;;;;293:20:0;303:10;293:20;;;58:1707;;;;;;",
  "sourcePath": "contracts/Trust.sol",
  "type": "contract"
}